/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.linguate.arboratecompiler.parser;

import org.linguate.arboratecompiler.lexer.*;
import org.linguate.arboratecompiler.node.*;
import org.linguate.arboratecompiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ASingleFuncDeclList */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AMultipleFuncDeclList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AFuncDecl */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AFuncDeclArgList */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce ANoneFuncDeclArgListHelper */
            {
                ArrayList<Object> list = new5();
                push(goTo(4), list);
            }
            break;
            case 6: /* reduce ASingleFuncDeclArgListHelper */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AMultipleFuncDeclArgListHelper */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AFuncDeclArg */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce ASingleCodeBlock */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list);
            }
            break;
            case 10: /* reduce AMultipleCodeBlock */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce ACodeBlockStatement */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list);
            }
            break;
            case 12: /* reduce ADeclarationStatement */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce AAssignmentStatement */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce AReturnStatement */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce AExpr */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ALogorPrecedenceLogor */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list);
            }
            break;
            case 17: /* reduce AFallThroughPrecedenceLogor */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce ALogxorPrecedenceLogxor */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list);
            }
            break;
            case 19: /* reduce AFallThroughPrecedenceLogxor */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce ALogandPrecedenceLogand */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AFallThroughPrecedenceLogand */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AEqualPrecedenceEqual */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce ANotEqualPrecedenceEqual */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce AFallThroughPrecedenceEqual */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list);
            }
            break;
            case 25: /* reduce ALessThanPrecedenceComp */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce AGreaterThanPrecedenceComp */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list);
            }
            break;
            case 27: /* reduce ALessEqualPrecedenceComp */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list);
            }
            break;
            case 28: /* reduce AGreaterEqualPrecedenceComp */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list);
            }
            break;
            case 29: /* reduce AFallThroughPrecedenceComp */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list);
            }
            break;
            case 30: /* reduce AAddPrecedenceAdd */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list);
            }
            break;
            case 31: /* reduce ASubtractPrecedenceAdd */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce AFallThroughPrecedenceAdd */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce AMultiplyPrecedenceMult */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list);
            }
            break;
            case 34: /* reduce ADividePrecedenceMult */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list);
            }
            break;
            case 35: /* reduce AFallThroughPrecedenceMult */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list);
            }
            break;
            case 36: /* reduce ALogicalNotPrecedenceUnary */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list);
            }
            break;
            case 37: /* reduce AFallThroughPrecedenceUnary */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list);
            }
            break;
            case 38: /* reduce AIntLitElement */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list);
            }
            break;
            case 39: /* reduce AStringLitElement */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce ABoolLitElement */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce AFuncCallElement */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce AVarFetchElement */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce ABracketedExprElement */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce AFuncCallArgList */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce ANoneFuncCallArgListHelper */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list);
            }
            break;
            case 46: /* reduce ASingleFuncCallArgListHelper */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list);
            }
            break;
            case 47: /* reduce AMultipleFuncCallArgListHelper */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list);
            }
            break;
            case 48: /* reduce AFuncCallArg */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list);
            }
            break;
            case 49: /* reduce AFuncDeclRetType */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list);
            }
            break;
            case 50: /* reduce AFuncDeclName */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list);
            }
            break;
            case 51: /* reduce AFuncDeclArgType */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list);
            }
            break;
            case 52: /* reduce AFuncDeclArgName */
            {
                ArrayList<Object> list = new52();
                push(goTo(24), list);
            }
            break;
            case 53: /* reduce AFuncCallName */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list);
            }
            break;
            case 54: /* reduce AVarDeclType */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list);
            }
            break;
            case 55: /* reduce AVarDeclName */
            {
                ArrayList<Object> list = new55();
                push(goTo(27), list);
            }
            break;
            case 56: /* reduce AVarAssignName */
            {
                ArrayList<Object> list = new56();
                push(goTo(28), list);
            }
            break;
            case 57: /* reduce AVarFetchName */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASingleFuncDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFuncDecl pfuncdeclNode1;
        pfuncdeclNode1 = (PFuncDecl)nodeArrayList1.get(0);
	if(pfuncdeclNode1 != null)
	{
	  listNode2.add(pfuncdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMultipleFuncDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PFuncDecl pfuncdeclNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pfuncdeclNode1 = (PFuncDecl)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pfuncdeclNode1 != null)
	{
	  listNode3.add(pfuncdeclNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PFuncDeclRetType pfuncdeclrettypeNode2;
        PFuncDeclName pfuncdeclnameNode3;
        PFuncDeclArgList pfuncdeclarglistNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pfuncdeclrettypeNode2 = (PFuncDeclRetType)nodeArrayList2.get(0);
        pfuncdeclnameNode3 = (PFuncDeclName)nodeArrayList3.get(0);
        pfuncdeclarglistNode4 = (PFuncDeclArgList)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pfuncdeclNode1 = new AFuncDecl(pfuncdeclrettypeNode2, pfuncdeclnameNode3, pfuncdeclarglistNode4, listNode6);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFuncDeclArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDeclArgList pfuncdeclarglistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pfuncdeclarglistNode1 = new AFuncDeclArgList(listNode3);
        }
	nodeList.add(pfuncdeclarglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ANoneFuncDeclArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASingleFuncDeclArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFuncDeclArg pfuncdeclargNode1;
        pfuncdeclargNode1 = (PFuncDeclArg)nodeArrayList1.get(0);
	if(pfuncdeclargNode1 != null)
	{
	  listNode2.add(pfuncdeclargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMultipleFuncDeclArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PFuncDeclArg pfuncdeclargNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pfuncdeclargNode1 = (PFuncDeclArg)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pfuncdeclargNode1 != null)
	{
	  listNode3.add(pfuncdeclargNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFuncDeclArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDeclArg pfuncdeclargNode1;
        {
            // Block
        PFuncDeclArgType pfuncdeclargtypeNode2;
        PFuncDeclArgName pfuncdeclargnameNode3;
        pfuncdeclargtypeNode2 = (PFuncDeclArgType)nodeArrayList1.get(0);
        pfuncdeclargnameNode3 = (PFuncDeclArgName)nodeArrayList2.get(0);

        pfuncdeclargNode1 = new AFuncDeclArg(pfuncdeclargtypeNode2, pfuncdeclargnameNode3);
        }
	nodeList.add(pfuncdeclargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASingleCodeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMultipleCodeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pstatementNode1 != null)
	{
	  listNode3.add(pstatementNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACodeBlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new ACodeBlockStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADeclarationStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PVarDeclType pvardecltypeNode2;
        PVarDeclName pvardeclnameNode3;
        pvardecltypeNode2 = (PVarDeclType)nodeArrayList1.get(0);
        pvardeclnameNode3 = (PVarDeclName)nodeArrayList2.get(0);

        pstatementNode1 = new ADeclarationStatement(pvardecltypeNode2, pvardeclnameNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PVarAssignName pvarassignnameNode2;
        PExpr pexprNode3;
        pvarassignnameNode2 = (PVarAssignName)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(pvarassignnameNode2, pexprNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexprNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ALogorPrecedenceLogor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new ALogicalOrExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AFallThroughPrecedenceLogor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ALogxorPrecedenceLogxor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new ALogicalXorExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AFallThroughPrecedenceLogxor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ALogandPrecedenceLogand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new ALogicalAndExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFallThroughPrecedenceLogand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEqualPrecedenceEqual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new AEqualExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ANotEqualPrecedenceEqual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new ANotEqualExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFallThroughPrecedenceEqual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ALessThanPrecedenceComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALessThanExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AGreaterThanPrecedenceComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGreaterThanExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ALessEqualPrecedenceComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new ALessEqualExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AGreaterEqualPrecedenceComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new AGreaterEqualExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AFallThroughPrecedenceComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAddPrecedenceAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAddExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASubtractPrecedenceAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ASubtractExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AFallThroughPrecedenceAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMultiplyPrecedenceMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultiplyExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ADividePrecedenceMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivideExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AFallThroughPrecedenceMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ALogicalNotPrecedenceUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ALogicalNotExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AFallThroughPrecedenceUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AIntLitElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIntString tintstringNode2;
        tintstringNode2 = (TIntString)nodeArrayList1.get(0);

        pexprNode1 = new AIntLitExpr(tintstringNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AStringLitElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TQuotedString tquotedstringNode2;
        tquotedstringNode2 = (TQuotedString)nodeArrayList1.get(0);

        pexprNode1 = new AStringLitExpr(tquotedstringNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ABoolLitElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TBoolString tboolstringNode2;
        tboolstringNode2 = (TBoolString)nodeArrayList1.get(0);

        pexprNode1 = new ABoolLitExpr(tboolstringNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AFuncCallElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFuncCallName pfunccallnameNode2;
        PFuncCallArgList pfunccallarglistNode3;
        pfunccallnameNode2 = (PFuncCallName)nodeArrayList1.get(0);
        pfunccallarglistNode3 = (PFuncCallArgList)nodeArrayList3.get(0);

        pexprNode1 = new AFuncCallExpr(pfunccallnameNode2, pfunccallarglistNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AVarFetchElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PVarFetchName pvarfetchnameNode2;
        pvarfetchnameNode2 = (PVarFetchName)nodeArrayList1.get(0);

        pexprNode1 = new AVarFetchExpr(pvarfetchnameNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ABracketedExprElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AFuncCallArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCallArgList pfunccallarglistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pfunccallarglistNode1 = new AFuncCallArgList(listNode3);
        }
	nodeList.add(pfunccallarglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANoneFuncCallArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ASingleFuncCallArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFuncCallArg pfunccallargNode1;
        pfunccallargNode1 = (PFuncCallArg)nodeArrayList1.get(0);
	if(pfunccallargNode1 != null)
	{
	  listNode2.add(pfunccallargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultipleFuncCallArgListHelper */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PFuncCallArg pfunccallargNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pfunccallargNode1 = (PFuncCallArg)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pfunccallargNode1 != null)
	{
	  listNode3.add(pfunccallargNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AFuncCallArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCallArg pfunccallargNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pfunccallargNode1 = new AFuncCallArg(pexprNode2);
        }
	nodeList.add(pfunccallargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AFuncDeclRetType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDeclRetType pfuncdeclrettypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfuncdeclrettypeNode1 = new AFuncDeclRetType(tidentifierNode2);
        }
	nodeList.add(pfuncdeclrettypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFuncDeclName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDeclName pfuncdeclnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfuncdeclnameNode1 = new AFuncDeclName(tidentifierNode2);
        }
	nodeList.add(pfuncdeclnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AFuncDeclArgType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDeclArgType pfuncdeclargtypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfuncdeclargtypeNode1 = new AFuncDeclArgType(tidentifierNode2);
        }
	nodeList.add(pfuncdeclargtypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFuncDeclArgName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDeclArgName pfuncdeclargnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfuncdeclargnameNode1 = new AFuncDeclArgName(tidentifierNode2);
        }
	nodeList.add(pfuncdeclargnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AFuncCallName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCallName pfunccallnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfunccallnameNode1 = new AFuncCallName(tidentifierNode2);
        }
	nodeList.add(pfunccallnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AVarDeclType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDeclType pvardecltypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvardecltypeNode1 = new AVarDeclType(tidentifierNode2);
        }
	nodeList.add(pvardecltypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AVarDeclName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDeclName pvardeclnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvardeclnameNode1 = new AVarDeclName(tidentifierNode2);
        }
	nodeList.add(pvardeclnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AVarAssignName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarAssignName pvarassignnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvarassignnameNode1 = new AVarAssignName(tidentifierNode2);
        }
	nodeList.add(pvarassignnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AVarFetchName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarFetchName pvarfetchnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvarfetchnameNode1 = new AVarFetchName(tidentifierNode2);
        }
	nodeList.add(pvarfetchnameNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {22, SHIFT, 5}, },
			{{-1, ERROR, 2}, {23, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 6}, {22, SHIFT, 8}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 9}, {4, SHIFT, 10}, },
			{{-1, REDUCE, 5}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 12}, {5, SHIFT, 16}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, {17, SHIFT, 17}, },
			{{-1, ERROR, 15}, {22, SHIFT, 18}, },
			{{-1, ERROR, 16}, {2, SHIFT, 20}, },
			{{-1, REDUCE, 5}, {22, SHIFT, 11}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 20}, {1, SHIFT, 22}, {2, SHIFT, 23}, {22, SHIFT, 24}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 22}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 23}, {1, SHIFT, 22}, {2, SHIFT, 23}, {22, SHIFT, 24}, },
			{{-1, REDUCE, 56}, {22, REDUCE, 54}, },
			{{-1, ERROR, 25}, {3, SHIFT, 48}, },
			{{-1, REDUCE, 9}, {1, SHIFT, 22}, {2, SHIFT, 23}, {22, SHIFT, 24}, },
			{{-1, ERROR, 27}, {22, SHIFT, 50}, },
			{{-1, ERROR, 28}, {12, SHIFT, 52}, },
			{{-1, ERROR, 29}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 30}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 57}, {4, REDUCE, 53}, },
			{{-1, ERROR, 35}, {18, SHIFT, 55}, },
			{{-1, REDUCE, 15}, {14, SHIFT, 56}, },
			{{-1, REDUCE, 17}, {15, SHIFT, 57}, },
			{{-1, REDUCE, 19}, {16, SHIFT, 58}, },
			{{-1, REDUCE, 21}, {12, SHIFT, 59}, {13, SHIFT, 60}, },
			{{-1, REDUCE, 24}, {10, SHIFT, 61}, {11, SHIFT, 62}, },
			{{-1, REDUCE, 29}, {6, SHIFT, 63}, {7, SHIFT, 64}, },
			{{-1, REDUCE, 32}, {8, SHIFT, 65}, {9, SHIFT, 66}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 45}, {4, SHIFT, 67}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 47}, {3, SHIFT, 68}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 51}, {18, SHIFT, 69}, },
			{{-1, ERROR, 52}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 53}, {5, SHIFT, 71}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 56}, {14, SHIFT, 72}, },
			{{-1, ERROR, 57}, {15, SHIFT, 73}, },
			{{-1, ERROR, 58}, {16, SHIFT, 74}, },
			{{-1, ERROR, 59}, {12, SHIFT, 75}, },
			{{-1, ERROR, 60}, {12, SHIFT, 76}, },
			{{-1, ERROR, 61}, {4, SHIFT, 29}, {12, SHIFT, 77}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 62}, {4, SHIFT, 29}, {12, SHIFT, 79}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 63}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 64}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 65}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 66}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, REDUCE, 45}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 70}, {18, SHIFT, 89}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 72}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 73}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 74}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 75}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 76}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, ERROR, 77}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, REDUCE, 25}, {6, SHIFT, 63}, {7, SHIFT, 64}, },
			{{-1, ERROR, 79}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, REDUCE, 26}, {6, SHIFT, 63}, {7, SHIFT, 64}, },
			{{-1, REDUCE, 30}, {8, SHIFT, 65}, {9, SHIFT, 66}, },
			{{-1, REDUCE, 31}, {8, SHIFT, 65}, {9, SHIFT, 66}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 86}, {5, SHIFT, 97}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, {17, SHIFT, 98}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, {15, SHIFT, 57}, },
			{{-1, REDUCE, 18}, {16, SHIFT, 58}, },
			{{-1, REDUCE, 20}, {12, SHIFT, 59}, {13, SHIFT, 60}, },
			{{-1, REDUCE, 22}, {10, SHIFT, 61}, {11, SHIFT, 62}, },
			{{-1, REDUCE, 23}, {10, SHIFT, 61}, {11, SHIFT, 62}, },
			{{-1, REDUCE, 27}, {6, SHIFT, 63}, {7, SHIFT, 64}, },
			{{-1, REDUCE, 28}, {6, SHIFT, 63}, {7, SHIFT, 64}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 45}, {4, SHIFT, 29}, {13, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, {22, SHIFT, 34}, },
			{{-1, REDUCE, 47}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 7}, },
			{{-1, 4}, },
			{{-1, 12}, },
			{{-1, 13}, {17, 21}, },
			{{-1, 14}, },
			{{-1, 25}, {23, 47}, {26, 49}, },
			{{-1, 26}, },
			{{-1, 85}, {22, 35}, {29, 53}, {52, 70}, },
			{{-1, 36}, },
			{{-1, 37}, {72, 90}, },
			{{-1, 38}, {73, 91}, },
			{{-1, 39}, {74, 92}, },
			{{-1, 40}, {75, 93}, {76, 94}, },
			{{-1, 41}, {61, 78}, {62, 80}, {77, 95}, {79, 96}, },
			{{-1, 42}, {63, 81}, {64, 82}, },
			{{-1, 43}, {30, 54}, {65, 83}, {66, 84}, },
			{{-1, 44}, },
			{{-1, 86}, },
			{{-1, 87}, {98, 99}, },
			{{-1, 88}, },
			{{-1, 6}, },
			{{-1, 9}, },
			{{-1, 15}, },
			{{-1, 19}, },
			{{-1, 45}, },
			{{-1, 27}, },
			{{-1, 51}, },
			{{-1, 28}, },
			{{-1, 46}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'function'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'function', EOF",
			"expecting: '('",
			"expecting: ')', identifier",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: '{'",
			"expecting: 'return', '{', identifier",
			"expecting: '(', '!', int string, quoted string, bool string, identifier",
			"expecting: '=', identifier",
			"expecting: '}'",
			"expecting: 'return', '{', '}', identifier",
			"expecting: '='",
			"expecting: ')', '+', '-', '*', '/', '<', '>', '=', '!', '|', '^', '&', ',', ';'",
			"expecting: '(', ')', '+', '-', '*', '/', '<', '>', '=', '!', '|', '^', '&', ',', ';'",
			"expecting: ';'",
			"expecting: ')', '|', ',', ';'",
			"expecting: ')', '|', '^', ',', ';'",
			"expecting: ')', '|', '^', '&', ',', ';'",
			"expecting: ')', '=', '!', '|', '^', '&', ',', ';'",
			"expecting: ')', '<', '>', '=', '!', '|', '^', '&', ',', ';'",
			"expecting: ')', '+', '-', '<', '>', '=', '!', '|', '^', '&', ',', ';'",
			"expecting: '|'",
			"expecting: '^'",
			"expecting: '&'",
			"expecting: '(', '=', '!', int string, quoted string, bool string, identifier",
			"expecting: '(', ')', '!', int string, quoted string, bool string, identifier",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 1, 1, 2, 4, 4, 5, 1, 6, 6, 7, 1, 8, 5, 7, 7, 9, 6, 10, 9, 11, 12, 13, 1, 14, 10, 10, 15, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 15, 15, 15, 4, 15, 12, 3, 12, 17, 17, 10, 6, 15, 13, 24, 25, 26, 14, 14, 27, 27, 10, 10, 10, 10, 28, 13, 13, 17, 15, 10, 10, 10, 10, 10, 10, 23, 10, 23, 15, 15, 15, 15, 7, 6, 6, 7, 13, 19, 20, 21, 22, 22, 23, 23, 15, 28, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
