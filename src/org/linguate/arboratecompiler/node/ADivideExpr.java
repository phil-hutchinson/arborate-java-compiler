/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.linguate.arboratecompiler.node;

import org.linguate.arboratecompiler.analysis.*;

@SuppressWarnings("nls")
public final class ADivideExpr extends PExpr
{
    private PValue _op1_;
    private PValue _op2_;

    public ADivideExpr()
    {
        // Constructor
    }

    public ADivideExpr(
        @SuppressWarnings("hiding") PValue _op1_,
        @SuppressWarnings("hiding") PValue _op2_)
    {
        // Constructor
        setOp1(_op1_);

        setOp2(_op2_);

    }

    @Override
    public Object clone()
    {
        return new ADivideExpr(
            cloneNode(this._op1_),
            cloneNode(this._op2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADivideExpr(this);
    }

    public PValue getOp1()
    {
        return this._op1_;
    }

    public void setOp1(PValue node)
    {
        if(this._op1_ != null)
        {
            this._op1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op1_ = node;
    }

    public PValue getOp2()
    {
        return this._op2_;
    }

    public void setOp2(PValue node)
    {
        if(this._op2_ != null)
        {
            this._op2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._op1_)
            + toString(this._op2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._op1_ == child)
        {
            this._op1_ = null;
            return;
        }

        if(this._op2_ == child)
        {
            this._op2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._op1_ == oldChild)
        {
            setOp1((PValue) newChild);
            return;
        }

        if(this._op2_ == oldChild)
        {
            setOp2((PValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
