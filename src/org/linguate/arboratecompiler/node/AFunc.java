/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.linguate.arboratecompiler.node;

import java.util.*;
import org.linguate.arboratecompiler.analysis.*;

@SuppressWarnings("nls")
public final class AFunc extends PFunc
{
    private PFuncName _funcName_;
    private final LinkedList<PExpr> _expr_ = new LinkedList<PExpr>();

    public AFunc()
    {
        // Constructor
    }

    public AFunc(
        @SuppressWarnings("hiding") PFuncName _funcName_,
        @SuppressWarnings("hiding") List<?> _expr_)
    {
        // Constructor
        setFuncName(_funcName_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new AFunc(
            cloneNode(this._funcName_),
            cloneList(this._expr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunc(this);
    }

    public PFuncName getFuncName()
    {
        return this._funcName_;
    }

    public void setFuncName(PFuncName node)
    {
        if(this._funcName_ != null)
        {
            this._funcName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcName_ = node;
    }

    public LinkedList<PExpr> getExpr()
    {
        return this._expr_;
    }

    public void setExpr(List<?> list)
    {
        for(PExpr e : this._expr_)
        {
            e.parent(null);
        }
        this._expr_.clear();

        for(Object obj_e : list)
        {
            PExpr e = (PExpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._expr_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._funcName_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._funcName_ == child)
        {
            this._funcName_ = null;
            return;
        }

        if(this._expr_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._funcName_ == oldChild)
        {
            setFuncName((PFuncName) newChild);
            return;
        }

        for(ListIterator<PExpr> i = this._expr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
