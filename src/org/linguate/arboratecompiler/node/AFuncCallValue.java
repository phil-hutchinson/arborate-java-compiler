/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.linguate.arboratecompiler.node;

import java.util.*;
import org.linguate.arboratecompiler.analysis.*;

@SuppressWarnings("nls")
public final class AFuncCallValue extends PValue
{
    private PFuncCallName _funcCallName_;
    private final LinkedList<PFuncCallArg> _funcCallArg_ = new LinkedList<PFuncCallArg>();

    public AFuncCallValue()
    {
        // Constructor
    }

    public AFuncCallValue(
        @SuppressWarnings("hiding") PFuncCallName _funcCallName_,
        @SuppressWarnings("hiding") List<?> _funcCallArg_)
    {
        // Constructor
        setFuncCallName(_funcCallName_);

        setFuncCallArg(_funcCallArg_);

    }

    @Override
    public Object clone()
    {
        return new AFuncCallValue(
            cloneNode(this._funcCallName_),
            cloneList(this._funcCallArg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFuncCallValue(this);
    }

    public PFuncCallName getFuncCallName()
    {
        return this._funcCallName_;
    }

    public void setFuncCallName(PFuncCallName node)
    {
        if(this._funcCallName_ != null)
        {
            this._funcCallName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcCallName_ = node;
    }

    public LinkedList<PFuncCallArg> getFuncCallArg()
    {
        return this._funcCallArg_;
    }

    public void setFuncCallArg(List<?> list)
    {
        for(PFuncCallArg e : this._funcCallArg_)
        {
            e.parent(null);
        }
        this._funcCallArg_.clear();

        for(Object obj_e : list)
        {
            PFuncCallArg e = (PFuncCallArg) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._funcCallArg_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._funcCallName_)
            + toString(this._funcCallArg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._funcCallName_ == child)
        {
            this._funcCallName_ = null;
            return;
        }

        if(this._funcCallArg_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._funcCallName_ == oldChild)
        {
            setFuncCallName((PFuncCallName) newChild);
            return;
        }

        for(ListIterator<PFuncCallArg> i = this._funcCallArg_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFuncCallArg) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
