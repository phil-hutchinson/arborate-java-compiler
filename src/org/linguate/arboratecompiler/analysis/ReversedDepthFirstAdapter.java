/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.linguate.arboratecompiler.analysis;

import java.util.*;
import org.linguate.arboratecompiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PFuncDecl> copy = new ArrayList<PFuncDecl>(node.getFunctions());
            Collections.reverse(copy);
            for(PFuncDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PTypeDecl> copy = new ArrayList<PTypeDecl>(node.getCustomTypes());
            Collections.reverse(copy);
            for(PTypeDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inATypeDecl(ATypeDecl node)
    {
        defaultIn(node);
    }

    public void outATypeDecl(ATypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDecl(ATypeDecl node)
    {
        inATypeDecl(node);
        if(node.getTypeDeclFieldList() != null)
        {
            node.getTypeDeclFieldList().apply(this);
        }
        if(node.getTypeDeclName() != null)
        {
            node.getTypeDeclName().apply(this);
        }
        outATypeDecl(node);
    }

    public void inATypeDeclFieldList(ATypeDeclFieldList node)
    {
        defaultIn(node);
    }

    public void outATypeDeclFieldList(ATypeDeclFieldList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclFieldList(ATypeDeclFieldList node)
    {
        inATypeDeclFieldList(node);
        {
            List<PTypeDeclField> copy = new ArrayList<PTypeDeclField>(node.getTypeDeclField());
            Collections.reverse(copy);
            for(PTypeDeclField e : copy)
            {
                e.apply(this);
            }
        }
        outATypeDeclFieldList(node);
    }

    public void inATypeDeclField(ATypeDeclField node)
    {
        defaultIn(node);
    }

    public void outATypeDeclField(ATypeDeclField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclField(ATypeDeclField node)
    {
        inATypeDeclField(node);
        if(node.getTypeDeclFieldName() != null)
        {
            node.getTypeDeclFieldName().apply(this);
        }
        if(node.getTypeDeclFieldType() != null)
        {
            node.getTypeDeclFieldType().apply(this);
        }
        outATypeDeclField(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFuncDeclArgList() != null)
        {
            node.getFuncDeclArgList().apply(this);
        }
        if(node.getFuncDeclName() != null)
        {
            node.getFuncDeclName().apply(this);
        }
        if(node.getFuncDeclRetType() != null)
        {
            node.getFuncDeclRetType().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAFuncDeclArgList(AFuncDeclArgList node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclArgList(AFuncDeclArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclArgList(AFuncDeclArgList node)
    {
        inAFuncDeclArgList(node);
        {
            List<PFuncDeclArg> copy = new ArrayList<PFuncDeclArg>(node.getFuncDeclArg());
            Collections.reverse(copy);
            for(PFuncDeclArg e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncDeclArgList(node);
    }

    public void inAFuncDeclArg(AFuncDeclArg node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclArg(AFuncDeclArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclArg(AFuncDeclArg node)
    {
        inAFuncDeclArg(node);
        if(node.getFuncDeclArgName() != null)
        {
            node.getFuncDeclArgName().apply(this);
        }
        if(node.getFuncDeclArgType() != null)
        {
            node.getFuncDeclArgType().apply(this);
        }
        outAFuncDeclArg(node);
    }

    public void inACodeBlockStatement(ACodeBlockStatement node)
    {
        defaultIn(node);
    }

    public void outACodeBlockStatement(ACodeBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACodeBlockStatement(ACodeBlockStatement node)
    {
        inACodeBlockStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outACodeBlockStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        {
            List<PIfSegment> copy = new ArrayList<PIfSegment>(node.getIfSegment());
            Collections.reverse(copy);
            for(PIfSegment e : copy)
            {
                e.apply(this);
            }
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getWhileCondition() != null)
        {
            node.getWhileCondition().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inADeclarationStatement(ADeclarationStatement node)
    {
        defaultIn(node);
    }

    public void outADeclarationStatement(ADeclarationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationStatement(ADeclarationStatement node)
    {
        inADeclarationStatement(node);
        if(node.getVarDeclName() != null)
        {
            node.getVarDeclName().apply(this);
        }
        if(node.getVarDeclType() != null)
        {
            node.getVarDeclType().apply(this);
        }
        outADeclarationStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getVarAssignName() != null)
        {
            node.getVarAssignName().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAConditionalIfSegment(AConditionalIfSegment node)
    {
        defaultIn(node);
    }

    public void outAConditionalIfSegment(AConditionalIfSegment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalIfSegment(AConditionalIfSegment node)
    {
        inAConditionalIfSegment(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIfCondition() != null)
        {
            node.getIfCondition().apply(this);
        }
        outAConditionalIfSegment(node);
    }

    public void inAOtherwiseIfSegment(AOtherwiseIfSegment node)
    {
        defaultIn(node);
    }

    public void outAOtherwiseIfSegment(AOtherwiseIfSegment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherwiseIfSegment(AOtherwiseIfSegment node)
    {
        inAOtherwiseIfSegment(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAOtherwiseIfSegment(node);
    }

    public void inAIfCondition(AIfCondition node)
    {
        defaultIn(node);
    }

    public void outAIfCondition(AIfCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfCondition(AIfCondition node)
    {
        inAIfCondition(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAIfCondition(node);
    }

    public void inAWhileCondition(AWhileCondition node)
    {
        defaultIn(node);
    }

    public void outAWhileCondition(AWhileCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileCondition(AWhileCondition node)
    {
        inAWhileCondition(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAWhileCondition(node);
    }

    public void inALogicalOrExpr(ALogicalOrExpr node)
    {
        defaultIn(node);
    }

    public void outALogicalOrExpr(ALogicalOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrExpr(ALogicalOrExpr node)
    {
        inALogicalOrExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALogicalOrExpr(node);
    }

    public void inALogicalXorExpr(ALogicalXorExpr node)
    {
        defaultIn(node);
    }

    public void outALogicalXorExpr(ALogicalXorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalXorExpr(ALogicalXorExpr node)
    {
        inALogicalXorExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALogicalXorExpr(node);
    }

    public void inALogicalAndExpr(ALogicalAndExpr node)
    {
        defaultIn(node);
    }

    public void outALogicalAndExpr(ALogicalAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndExpr(ALogicalAndExpr node)
    {
        inALogicalAndExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALogicalAndExpr(node);
    }

    public void inAEqualExpr(AEqualExpr node)
    {
        defaultIn(node);
    }

    public void outAEqualExpr(AEqualExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExpr(AEqualExpr node)
    {
        inAEqualExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqualExpr(node);
    }

    public void inANotEqualExpr(ANotEqualExpr node)
    {
        defaultIn(node);
    }

    public void outANotEqualExpr(ANotEqualExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualExpr(ANotEqualExpr node)
    {
        inANotEqualExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANotEqualExpr(node);
    }

    public void inALessThanExpr(ALessThanExpr node)
    {
        defaultIn(node);
    }

    public void outALessThanExpr(ALessThanExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanExpr(ALessThanExpr node)
    {
        inALessThanExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessThanExpr(node);
    }

    public void inAGreaterThanExpr(AGreaterThanExpr node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanExpr(AGreaterThanExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanExpr(AGreaterThanExpr node)
    {
        inAGreaterThanExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterThanExpr(node);
    }

    public void inALessEqualExpr(ALessEqualExpr node)
    {
        defaultIn(node);
    }

    public void outALessEqualExpr(ALessEqualExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualExpr(ALessEqualExpr node)
    {
        inALessEqualExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessEqualExpr(node);
    }

    public void inAGreaterEqualExpr(AGreaterEqualExpr node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualExpr(AGreaterEqualExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualExpr(AGreaterEqualExpr node)
    {
        inAGreaterEqualExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterEqualExpr(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubtractExpr(ASubtractExpr node)
    {
        defaultIn(node);
    }

    public void outASubtractExpr(ASubtractExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractExpr(ASubtractExpr node)
    {
        inASubtractExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubtractExpr(node);
    }

    public void inAMultiplyExpr(AMultiplyExpr node)
    {
        defaultIn(node);
    }

    public void outAMultiplyExpr(AMultiplyExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyExpr(AMultiplyExpr node)
    {
        inAMultiplyExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultiplyExpr(node);
    }

    public void inADivideExpr(ADivideExpr node)
    {
        defaultIn(node);
    }

    public void outADivideExpr(ADivideExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideExpr(ADivideExpr node)
    {
        inADivideExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivideExpr(node);
    }

    public void inALogicalNotExpr(ALogicalNotExpr node)
    {
        defaultIn(node);
    }

    public void outALogicalNotExpr(ALogicalNotExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalNotExpr(ALogicalNotExpr node)
    {
        inALogicalNotExpr(node);
        if(node.getOperand() != null)
        {
            node.getOperand().apply(this);
        }
        outALogicalNotExpr(node);
    }

    public void inAIntLitExpr(AIntLitExpr node)
    {
        defaultIn(node);
    }

    public void outAIntLitExpr(AIntLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLitExpr(AIntLitExpr node)
    {
        inAIntLitExpr(node);
        if(node.getIntString() != null)
        {
            node.getIntString().apply(this);
        }
        outAIntLitExpr(node);
    }

    public void inAStringLitExpr(AStringLitExpr node)
    {
        defaultIn(node);
    }

    public void outAStringLitExpr(AStringLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLitExpr(AStringLitExpr node)
    {
        inAStringLitExpr(node);
        if(node.getQuotedString() != null)
        {
            node.getQuotedString().apply(this);
        }
        outAStringLitExpr(node);
    }

    public void inABoolLitExpr(ABoolLitExpr node)
    {
        defaultIn(node);
    }

    public void outABoolLitExpr(ABoolLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolLitExpr(ABoolLitExpr node)
    {
        inABoolLitExpr(node);
        if(node.getBoolString() != null)
        {
            node.getBoolString().apply(this);
        }
        outABoolLitExpr(node);
    }

    public void inAFuncCallExpr(AFuncCallExpr node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExpr(AFuncCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallExpr(AFuncCallExpr node)
    {
        inAFuncCallExpr(node);
        if(node.getFuncCallArgList() != null)
        {
            node.getFuncCallArgList().apply(this);
        }
        if(node.getFuncCallName() != null)
        {
            node.getFuncCallName().apply(this);
        }
        outAFuncCallExpr(node);
    }

    public void inAVarFetchExpr(AVarFetchExpr node)
    {
        defaultIn(node);
    }

    public void outAVarFetchExpr(AVarFetchExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFetchExpr(AVarFetchExpr node)
    {
        inAVarFetchExpr(node);
        if(node.getVarFetchName() != null)
        {
            node.getVarFetchName().apply(this);
        }
        outAVarFetchExpr(node);
    }

    public void inANewVarExpr(ANewVarExpr node)
    {
        defaultIn(node);
    }

    public void outANewVarExpr(ANewVarExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewVarExpr(ANewVarExpr node)
    {
        inANewVarExpr(node);
        if(node.getNewVarType() != null)
        {
            node.getNewVarType().apply(this);
        }
        outANewVarExpr(node);
    }

    public void inAFuncCallArgList(AFuncCallArgList node)
    {
        defaultIn(node);
    }

    public void outAFuncCallArgList(AFuncCallArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallArgList(AFuncCallArgList node)
    {
        inAFuncCallArgList(node);
        {
            List<PFuncCallArg> copy = new ArrayList<PFuncCallArg>(node.getFuncCallArg());
            Collections.reverse(copy);
            for(PFuncCallArg e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncCallArgList(node);
    }

    public void inAFuncCallArg(AFuncCallArg node)
    {
        defaultIn(node);
    }

    public void outAFuncCallArg(AFuncCallArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallArg(AFuncCallArg node)
    {
        inAFuncCallArg(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAFuncCallArg(node);
    }

    public void inATypeDeclName(ATypeDeclName node)
    {
        defaultIn(node);
    }

    public void outATypeDeclName(ATypeDeclName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclName(ATypeDeclName node)
    {
        inATypeDeclName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeDeclName(node);
    }

    public void inATypeDeclFieldType(ATypeDeclFieldType node)
    {
        defaultIn(node);
    }

    public void outATypeDeclFieldType(ATypeDeclFieldType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclFieldType(ATypeDeclFieldType node)
    {
        inATypeDeclFieldType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeDeclFieldType(node);
    }

    public void inATypeDeclFieldName(ATypeDeclFieldName node)
    {
        defaultIn(node);
    }

    public void outATypeDeclFieldName(ATypeDeclFieldName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclFieldName(ATypeDeclFieldName node)
    {
        inATypeDeclFieldName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeDeclFieldName(node);
    }

    public void inAFuncDeclRetType(AFuncDeclRetType node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclRetType(AFuncDeclRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclRetType(AFuncDeclRetType node)
    {
        inAFuncDeclRetType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFuncDeclRetType(node);
    }

    public void inAFuncDeclName(AFuncDeclName node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclName(AFuncDeclName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclName(AFuncDeclName node)
    {
        inAFuncDeclName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFuncDeclName(node);
    }

    public void inAFuncDeclArgType(AFuncDeclArgType node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclArgType(AFuncDeclArgType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclArgType(AFuncDeclArgType node)
    {
        inAFuncDeclArgType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFuncDeclArgType(node);
    }

    public void inAFuncDeclArgName(AFuncDeclArgName node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclArgName(AFuncDeclArgName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclArgName(AFuncDeclArgName node)
    {
        inAFuncDeclArgName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFuncDeclArgName(node);
    }

    public void inAFuncCallName(AFuncCallName node)
    {
        defaultIn(node);
    }

    public void outAFuncCallName(AFuncCallName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallName(AFuncCallName node)
    {
        inAFuncCallName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFuncCallName(node);
    }

    public void inAVarDeclType(AVarDeclType node)
    {
        defaultIn(node);
    }

    public void outAVarDeclType(AVarDeclType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclType(AVarDeclType node)
    {
        inAVarDeclType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarDeclType(node);
    }

    public void inAVarDeclName(AVarDeclName node)
    {
        defaultIn(node);
    }

    public void outAVarDeclName(AVarDeclName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclName(AVarDeclName node)
    {
        inAVarDeclName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarDeclName(node);
    }

    public void inAVarAssignName(AVarAssignName node)
    {
        defaultIn(node);
    }

    public void outAVarAssignName(AVarAssignName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAssignName(AVarAssignName node)
    {
        inAVarAssignName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarAssignName(node);
    }

    public void inAVarFetchName(AVarFetchName node)
    {
        defaultIn(node);
    }

    public void outAVarFetchName(AVarFetchName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFetchName(AVarFetchName node)
    {
        inAVarFetchName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarFetchName(node);
    }
}
