/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.linguate.arboratecompiler.analysis;

import java.util.*;
import org.linguate.arboratecompiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGrammar().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGrammar(AGrammar node)
    {
        defaultIn(node);
    }

    public void outAGrammar(AGrammar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGrammar(AGrammar node)
    {
        inAGrammar(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOperand() != null)
        {
            node.getOperand().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        outAGrammar(node);
    }

    public void inAIntLit(AIntLit node)
    {
        defaultIn(node);
    }

    public void outAIntLit(AIntLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLit(AIntLit node)
    {
        inAIntLit(node);
        if(node.getIntString() != null)
        {
            node.getIntString().apply(this);
        }
        outAIntLit(node);
    }

    public void inAAddOperator(AAddOperator node)
    {
        defaultIn(node);
    }

    public void outAAddOperator(AAddOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddOperator(AAddOperator node)
    {
        inAAddOperator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAAddOperator(node);
    }

    public void inASubtractOperator(ASubtractOperator node)
    {
        defaultIn(node);
    }

    public void outASubtractOperator(ASubtractOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractOperator(ASubtractOperator node)
    {
        inASubtractOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outASubtractOperator(node);
    }

    public void inAMultiplyOperator(AMultiplyOperator node)
    {
        defaultIn(node);
    }

    public void outAMultiplyOperator(AMultiplyOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyOperator(AMultiplyOperator node)
    {
        inAMultiplyOperator(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMultiplyOperator(node);
    }

    public void inADivideOperator(ADivideOperator node)
    {
        defaultIn(node);
    }

    public void outADivideOperator(ADivideOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideOperator(ADivideOperator node)
    {
        inADivideOperator(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        outADivideOperator(node);
    }
}
