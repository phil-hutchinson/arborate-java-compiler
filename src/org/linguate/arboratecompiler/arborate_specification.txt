/* This grammar defines the SableCC 2.x input language. */

Package org.linguate.arboratecompiler; // Root Java package for generated files.

Helpers

/* These are character sets and regular expressions used in the definition of tokens. */

    digit = ['0' .. '9'];
    non_zero_digit = [digit - '0'];

    alpha = [['a' .. 'z'] + ['A' .. 'Z']];
    alphanumeric = [alpha + digit];
    tab = 9;
    cr = 13;
    lf = 10;
    eol = cr lf | cr | lf;        // This takes care of different platforms

    blank = (' ' | tab | eol)+;

States
    normal;

Tokens
    kw_function = 'function';

    left_curly = '{';
    right_curly = '}';
    left_round = '(';
    right_round = ')';

    plus = '+';
    minus = '-';
    star = '*';
    slash = '/';

    int_string = non_zero_digit digit*;
    identifier = alpha alphanumeric*;

    blank = blank;

Ignored Tokens 

    blank;

Productions
    program {-> program} =
        [functions]:function_list { -> New program( [functions.func]) };

    function_list {-> func*} =
        {single} [function]:func { -> [function.func] }
        | {multiple} [function]:func [rest]:function_list {-> [function.func, rest.func] };

    func {-> func} = 
        kw_function func_name left_round right_round left_curly statement right_curly { -> New func(func_name, statement.expr) };

    statement {-> expr} =
        {add} [op1]:value plus [op2]:value { -> New expr.add(op1.value, op2.value)}
        | {subtract} [op1]:value minus [op2]:value { -> New expr.subtract(op1.value, op2.value)}
        | {multiply} [op1]:value star [op2]:value { -> New expr.multiply(op1.value, op2.value)}
        | {divide} [op1]:value slash [op2]:value { -> New expr.divide(op1.value, op2.value)};

    value {-> value} =
        {int_lit} int_string { -> New value.int_lit(int_string) }
        | {func_call } func_call_name left_round right_round {-> New value.func_call(func_call_name) };

    /*int_lit {-> int_lit} = 
        int_string { -> New int_lit(int_string) };*/

    func_name =
        identifier;

    func_call_name =
        identifier;

Abstract Syntax Tree
program = [functions]:func*;

func = func_name expr;

func_call = func_call_name;

expr = {add} [op1]:value [op2]:value
     | {subtract} [op1]:value [op2]:value
     | {multiply} [op1]:value [op2]:value
     | {divide} [op1]:value [op2]:value;

value =
    {int_lit} int_string
    | {func_call} func_call_name;

func_name = identifier;

func_call_name = identifier;