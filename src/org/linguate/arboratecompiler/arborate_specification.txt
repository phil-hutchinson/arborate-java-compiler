/* This grammar defines the SableCC 2.x input language. */

Package org.linguate.arboratecompiler; // Root Java package for generated files.

Helpers

/* These are character sets and regular expressions used in the definition of tokens. */
   
    digit = ['0' .. '9'];
    non_zero_digit = [digit - '0'];

    tab = 9;
    cr = 13;
    lf = 10;
    eol = cr lf | cr | lf;        // This takes care of different platforms

    blank = (' ' | tab | eol)+;

States
    normal;

Tokens

    plus = '+';
    minus = '-';
    star = '*';
    slash = '/';

    int_string = non_zero_digit digit*;

    blank = blank;

Ignored Tokens 

    blank;

Productions
    grammar {-> expr} =
        {add} [op1]:int_lit plus [op2]:int_lit { -> New expr.add(op1.int_lit, op2.int_lit)}
        | {subtract} [op1]:int_lit minus [op2]:int_lit { -> New expr.subtract(op1.int_lit, op2.int_lit)}
        | {multiply} [op1]:int_lit star [op2]:int_lit { -> New expr.multiply(op1.int_lit, op2.int_lit)}
        | {divide} [op1]:int_lit slash [op2]:int_lit { -> New expr.divide(op1.int_lit, op2.int_lit)};

    int_lit {-> int_lit} = 
        int_string { -> New int_lit(int_string) };


Abstract Syntax Tree

expr = {add} [op1]:int_lit [op2]:int_lit
     | {subtract} [op1]:int_lit [op2]:int_lit
     | {multiply} [op1]:int_lit [op2]:int_lit
     | {divide} [op1]:int_lit [op2]:int_lit;

int_lit = int_string;