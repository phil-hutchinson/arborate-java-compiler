/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.linguate.arboratecompiler.analysis;

import org.linguate.arboratecompiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseATypeDecl(ATypeDecl node);
    void caseATypeDeclFieldList(ATypeDeclFieldList node);
    void caseATypeDeclField(ATypeDeclField node);
    void caseAFuncDecl(AFuncDecl node);
    void caseAFuncDeclArgList(AFuncDeclArgList node);
    void caseAFuncDeclArg(AFuncDeclArg node);
    void caseACodeBlockStatement(ACodeBlockStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseADeclarationStatement(ADeclarationStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAConditionalIfSegment(AConditionalIfSegment node);
    void caseAOtherwiseIfSegment(AOtherwiseIfSegment node);
    void caseAIfCondition(AIfCondition node);
    void caseAWhileCondition(AWhileCondition node);
    void caseALogicalOrExpr(ALogicalOrExpr node);
    void caseALogicalXorExpr(ALogicalXorExpr node);
    void caseALogicalAndExpr(ALogicalAndExpr node);
    void caseAEqualExpr(AEqualExpr node);
    void caseANotEqualExpr(ANotEqualExpr node);
    void caseALessThanExpr(ALessThanExpr node);
    void caseAGreaterThanExpr(AGreaterThanExpr node);
    void caseALessEqualExpr(ALessEqualExpr node);
    void caseAGreaterEqualExpr(AGreaterEqualExpr node);
    void caseAAddExpr(AAddExpr node);
    void caseASubtractExpr(ASubtractExpr node);
    void caseAMultiplyExpr(AMultiplyExpr node);
    void caseADivideExpr(ADivideExpr node);
    void caseALogicalNotExpr(ALogicalNotExpr node);
    void caseAIntLitExpr(AIntLitExpr node);
    void caseAStringLitExpr(AStringLitExpr node);
    void caseABoolLitExpr(ABoolLitExpr node);
    void caseAFuncCallExpr(AFuncCallExpr node);
    void caseAVarFetchExpr(AVarFetchExpr node);
    void caseANewVarExpr(ANewVarExpr node);
    void caseAFuncCallArgList(AFuncCallArgList node);
    void caseAFuncCallArg(AFuncCallArg node);
    void caseATypeDeclName(ATypeDeclName node);
    void caseATypeDeclFieldType(ATypeDeclFieldType node);
    void caseATypeDeclFieldName(ATypeDeclFieldName node);
    void caseAFuncDeclRetType(AFuncDeclRetType node);
    void caseAFuncDeclName(AFuncDeclName node);
    void caseAFuncDeclArgType(AFuncDeclArgType node);
    void caseAFuncDeclArgName(AFuncDeclArgName node);
    void caseAFuncCallName(AFuncCallName node);
    void caseAVarDeclType(AVarDeclType node);
    void caseAVarDeclName(AVarDeclName node);
    void caseAVarAssignName(AVarAssignName node);
    void caseAVarFetchName(AVarFetchName node);
    void caseANewVarInitFieldList(ANewVarInitFieldList node);
    void caseANewVarInitField(ANewVarInitField node);

    void caseTKwFunction(TKwFunction node);
    void caseTKwReturn(TKwReturn node);
    void caseTKwIf(TKwIf node);
    void caseTKwElse(TKwElse node);
    void caseTKwElseif(TKwElseif node);
    void caseTKwEndif(TKwEndif node);
    void caseTKwWhile(TKwWhile node);
    void caseTKwEndwhile(TKwEndwhile node);
    void caseTKwBlock(TKwBlock node);
    void caseTKwEndblock(TKwEndblock node);
    void caseTKwNew(TKwNew node);
    void caseTKwType(TKwType node);
    void caseTLeftCurly(TLeftCurly node);
    void caseTRightCurly(TRightCurly node);
    void caseTLeftRound(TLeftRound node);
    void caseTRightRound(TRightRound node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTEquals(TEquals node);
    void caseTExclamation(TExclamation node);
    void caseTBar(TBar node);
    void caseTCaret(TCaret node);
    void caseTAmpersand(TAmpersand node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTIntString(TIntString node);
    void caseTQuotedString(TQuotedString node);
    void caseTBoolString(TBoolString node);
    void caseTIdentifier(TIdentifier node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
